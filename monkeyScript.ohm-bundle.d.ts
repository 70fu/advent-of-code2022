// AUTOGENERATED FILE
// This file was generated from monkeyScript.ohm by `ohm generateBundles`.

import {
  ActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface MonkeyScriptActionDict<T> extends ActionDict<T> {
  Monkeys?: (this: NonterminalNode, arg0: IterationNode) => T;
  Monkey?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: NonterminalNode, arg5: NonterminalNode) => T;
  StartingItems?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Inventory?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  OperationLine?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Operation?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  OperationExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  MulExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  AddExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  operand?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode) => T;
  Test?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  TrueCondition?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  FalseCondition?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
}

export interface MonkeyScriptSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: MonkeyScriptActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: MonkeyScriptActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: MonkeyScriptActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: MonkeyScriptActionDict<T>): this;
}

export interface MonkeyScriptGrammar extends Grammar {
  createSemantics(): MonkeyScriptSemantics;
  extendSemantics(superSemantics: MonkeyScriptSemantics): MonkeyScriptSemantics;
}

declare const grammar: MonkeyScriptGrammar;
export default grammar;

